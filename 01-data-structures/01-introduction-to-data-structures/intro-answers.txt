## A line of people at an amusement park ride
* The line is composed of members, represented by strings
* There sa a front and back of the line.
* A new person enters the line at the back.
* A member of the line can exit at any time, and those behind move up to take their place.

1. A class that creates an array with several methods
* The class Line has six methods, a special type of queue
* Line =  a class for a simple array of strings
*
* search("string")      returns index if match to string if found, nil if not.
* join("string")        to add a person to the line
* leave("string")       to remove a person from the line
* front                 returns first member of line
* middle                returns the middle member (rounds up if needed)
* back                  returns last member of line

2. Search for a specific member in the line by using line.search("string") where string is the member's name or identifying string

3. Good for most simple lines without grouping, such as grocery checkout,
    new apple iphones waiting line, open-seating event ticket sales.

## Pixels on a computer screen
* Screen has width and height
* Screen contains Pixels.
* Pixel = three color values RGB
* color values must be less than 255 and greater than zero
* if color value < 0, default to 0
* if color value > 255, default to 255
* pixel must have a coordinate location indicated by two integers, x,y

1. Since Ruby doesn't support a two-dimensional array, we used a array of arrays
   Screen class is the outer array and Pixel class is the sub array
* Screen               class with (width,height)
*   .insert(pixel, x, y)  screen method with pixel, width/height location
*   .at(x,y)              location at width, height
*   .inbounds(x, y)       checks whether location is inside screen area
*
* Pixel                class with red value, green value, blue value, width, and height
*    .validate_color(color) if color value is more than 255, defaults to 255
*                           and if value less than zero, defaults to zero.

2. We have no method to search unless  the specific position in the matrix is known. use screen.at(x,y)

3. Good for two dimensional matrices of color, like many childrens games like connect-four,
    and could be adapted to storage of info other than color.
