SEARCHING ALGORITHMS

1. Given the alpha sorted collection in this checkpoint
   how many itertions would it take to find the value G
   using linear search?

   7 iterations or index+1

2. Given the alpha sorted collection in the checkpoint
   how many iterations...using a binary search?

   3 iteratons

3. Calculate fib(10), fib(11), and fib(12) by hand.

  fib(10)
     0, 1, (1+0) 1, (1+1) 2, (2+1)3, (3+2) 5, (5+3) 8, (8+5) 13,
     (13+8) 21, (21+13) 34, (34+21)55

  fib(11)
     the same as above and 55 + 34 = 89

  fib(12)
     fib(10), (55+34) 89 , (89 + 55) 144

----Fibonnaci iterative vs. recursive times----

Recursive Fibonnaci 20:
  0.000000   0.000000   0.000000 (  0.001606)
Iterative Fibonnaci 20:
  0.000000   0.000000   0.000000 (  0.000010)
Recursive Fibonnaci 40:
 20.690000   0.100000  20.790000 ( 20.975874)
Iterative Fibonnaci 40:
  0.000000   0.000000   0.000000 (  0.000011)

Conclusion: Iteration is faster than recursion.

1. Given an unsorted collection of a million items, which
   algorithm would you choose between linear search and binary search?
   Would you use an iterative or recursive solution?
   Explain your reasoning.

   For unsorted, it would be rather obvious that a iterative linear search
   would be the fastest. Binary search is rather useless with an unsorted array.
   Recursion is not helpful in this iterative search.

2. Given an sorted collection of a million items, which
   algorithm would you choose between linear search and binary search?
   Would you use an iterative or recursive solution?
   Explain your reasoning.

   For a sorted array, I would choose iterative binary search,
   Binary search is 0(log n) time complexity with a sorted array.
   Recursion may be slower than iteration because, in addition to processing
   the loop content, it has to deal with the recursive call stack frame,
   which will mean more code is run, which means it will be slower.

